{"ast":null,"code":"var _jsxFileName = \"/Users/jpayala/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // Fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n    return data;\n  }; // Fetch Tasks\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); //   const id = Math.floor(Math.random() * 10000) +1\n    //   const newTask = { id, ...task }\n    //   setTasks([...tasks, newTask])\n  }; // Delete Task Function\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 23\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deleteTask,\n        onToggle: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this) : 'There are no tasks', /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","BrowserRouter","Router","Route","Routes","Header","Footer","Tasks","AddTask","About","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","length"],"sources":["/Users/jpayala/react-task-tracker/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport {BrowserRouter as Router, Route, Routes} from 'react-router-dom';\nimport Header from './components/Header'\nimport Footer  from './components/Footer'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport About from './components/About'\n\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState (false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\")\n    const data = await res.json()\n\n    return data\n  }\n  // Fetch Tasks\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n    // Add Task\n     const addTask = async (task) => {\n      const res = await fetch(\"http://localhost:5000/tasks\", {\n        method: 'POST',\n        headers: {\n          'Content-type' : 'application/json'\n        },\n        body: JSON.stringify(task)\n      })\n\n      const data = await res.json()\n\n      setTasks([...tasks, data])\n\n\n    //   const id = Math.floor(Math.random() * 10000) +1\n    //   const newTask = { id, ...task }\n    //   setTasks([...tasks, newTask])\n    }\n\n\n    // Delete Task Function\n    const deleteTask = async (id) => {\n      await fetch(`http://localhost:5000/tasks/${id}`, {\n        method: 'DELETE'\n      })\n\n      setTasks(tasks.filter((task) => task.id !== id))\n      \n    }\n    \n    // Toggle Reminder\n    const toggleReminder = async (id) => {\n      const taskToToggle = await fetchTask(id)\n      const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder }\n\n      const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n        method:'PUT',\n        headers: {\n          'Content-type' : 'application/json'\n        },\n        body: JSON.stringify(updTask),\n      })\n\n      const data = await res.json()\n\n\n      setTasks(tasks.map((task) =>\n       task.id === id ? { ...task, reminder:\n       data.reminder } : task\n       )\n      )\n    }\n\n\n  return (\n    <Router>\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)}\n      showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd={addTask}/>}\n      {tasks.length > 0 ? (\n      <Tasks  \n        tasks={tasks} \n        onDelete={deleteTask} \n        onToggle={toggleReminder} \n      />\n      ) : (\n         'There are no tasks'\n      )}\n      <Route path='/about' component={About}/>\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}